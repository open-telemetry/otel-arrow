// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: opentelemetry/proto/experimental/arrow/v1/arrow_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArrowStreamServiceClient is the client API for ArrowStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArrowStreamServiceClient interface {
	// The ArrowStream endpoint is a bi-directional stream used to send batch of
	// `BatchArrowRecords` from the exporter to the collector. The collector
	// returns `BatchStatus` messages to acknowledge the `BatchArrowRecords`
	// messages received.
	ArrowStream(ctx context.Context, opts ...grpc.CallOption) (ArrowStreamService_ArrowStreamClient, error)
}

type arrowStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArrowStreamServiceClient(cc grpc.ClientConnInterface) ArrowStreamServiceClient {
	return &arrowStreamServiceClient{cc}
}

func (c *arrowStreamServiceClient) ArrowStream(ctx context.Context, opts ...grpc.CallOption) (ArrowStreamService_ArrowStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArrowStreamService_ServiceDesc.Streams[0], "/opentelemetry.proto.experimental.arrow.v1.ArrowStreamService/ArrowStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &arrowStreamServiceArrowStreamClient{stream}
	return x, nil
}

type ArrowStreamService_ArrowStreamClient interface {
	Send(*BatchArrowRecords) error
	Recv() (*BatchStatus, error)
	grpc.ClientStream
}

type arrowStreamServiceArrowStreamClient struct {
	grpc.ClientStream
}

func (x *arrowStreamServiceArrowStreamClient) Send(m *BatchArrowRecords) error {
	return x.ClientStream.SendMsg(m)
}

func (x *arrowStreamServiceArrowStreamClient) Recv() (*BatchStatus, error) {
	m := new(BatchStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArrowStreamServiceServer is the server API for ArrowStreamService service.
// All implementations must embed UnimplementedArrowStreamServiceServer
// for forward compatibility
type ArrowStreamServiceServer interface {
	// The ArrowStream endpoint is a bi-directional stream used to send batch of
	// `BatchArrowRecords` from the exporter to the collector. The collector
	// returns `BatchStatus` messages to acknowledge the `BatchArrowRecords`
	// messages received.
	ArrowStream(ArrowStreamService_ArrowStreamServer) error
	mustEmbedUnimplementedArrowStreamServiceServer()
}

// UnimplementedArrowStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArrowStreamServiceServer struct {
}

func (UnimplementedArrowStreamServiceServer) ArrowStream(ArrowStreamService_ArrowStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ArrowStream not implemented")
}
func (UnimplementedArrowStreamServiceServer) mustEmbedUnimplementedArrowStreamServiceServer() {}

// UnsafeArrowStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArrowStreamServiceServer will
// result in compilation errors.
type UnsafeArrowStreamServiceServer interface {
	mustEmbedUnimplementedArrowStreamServiceServer()
}

func RegisterArrowStreamServiceServer(s grpc.ServiceRegistrar, srv ArrowStreamServiceServer) {
	s.RegisterService(&ArrowStreamService_ServiceDesc, srv)
}

func _ArrowStreamService_ArrowStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ArrowStreamServiceServer).ArrowStream(&arrowStreamServiceArrowStreamServer{stream})
}

type ArrowStreamService_ArrowStreamServer interface {
	Send(*BatchStatus) error
	Recv() (*BatchArrowRecords, error)
	grpc.ServerStream
}

type arrowStreamServiceArrowStreamServer struct {
	grpc.ServerStream
}

func (x *arrowStreamServiceArrowStreamServer) Send(m *BatchStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *arrowStreamServiceArrowStreamServer) Recv() (*BatchArrowRecords, error) {
	m := new(BatchArrowRecords)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArrowStreamService_ServiceDesc is the grpc.ServiceDesc for ArrowStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArrowStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opentelemetry.proto.experimental.arrow.v1.ArrowStreamService",
	HandlerType: (*ArrowStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ArrowStream",
			Handler:       _ArrowStreamService_ArrowStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "opentelemetry/proto/experimental/arrow/v1/arrow_service.proto",
}

// ArrowTracesServiceClient is the client API for ArrowTracesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArrowTracesServiceClient interface {
	ArrowTraces(ctx context.Context, opts ...grpc.CallOption) (ArrowTracesService_ArrowTracesClient, error)
}

type arrowTracesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArrowTracesServiceClient(cc grpc.ClientConnInterface) ArrowTracesServiceClient {
	return &arrowTracesServiceClient{cc}
}

func (c *arrowTracesServiceClient) ArrowTraces(ctx context.Context, opts ...grpc.CallOption) (ArrowTracesService_ArrowTracesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArrowTracesService_ServiceDesc.Streams[0], "/opentelemetry.proto.experimental.arrow.v1.ArrowTracesService/ArrowTraces", opts...)
	if err != nil {
		return nil, err
	}
	x := &arrowTracesServiceArrowTracesClient{stream}
	return x, nil
}

type ArrowTracesService_ArrowTracesClient interface {
	Send(*BatchArrowRecords) error
	Recv() (*BatchStatus, error)
	grpc.ClientStream
}

type arrowTracesServiceArrowTracesClient struct {
	grpc.ClientStream
}

func (x *arrowTracesServiceArrowTracesClient) Send(m *BatchArrowRecords) error {
	return x.ClientStream.SendMsg(m)
}

func (x *arrowTracesServiceArrowTracesClient) Recv() (*BatchStatus, error) {
	m := new(BatchStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArrowTracesServiceServer is the server API for ArrowTracesService service.
// All implementations must embed UnimplementedArrowTracesServiceServer
// for forward compatibility
type ArrowTracesServiceServer interface {
	ArrowTraces(ArrowTracesService_ArrowTracesServer) error
	mustEmbedUnimplementedArrowTracesServiceServer()
}

// UnimplementedArrowTracesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArrowTracesServiceServer struct {
}

func (UnimplementedArrowTracesServiceServer) ArrowTraces(ArrowTracesService_ArrowTracesServer) error {
	return status.Errorf(codes.Unimplemented, "method ArrowTraces not implemented")
}
func (UnimplementedArrowTracesServiceServer) mustEmbedUnimplementedArrowTracesServiceServer() {}

// UnsafeArrowTracesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArrowTracesServiceServer will
// result in compilation errors.
type UnsafeArrowTracesServiceServer interface {
	mustEmbedUnimplementedArrowTracesServiceServer()
}

func RegisterArrowTracesServiceServer(s grpc.ServiceRegistrar, srv ArrowTracesServiceServer) {
	s.RegisterService(&ArrowTracesService_ServiceDesc, srv)
}

func _ArrowTracesService_ArrowTraces_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ArrowTracesServiceServer).ArrowTraces(&arrowTracesServiceArrowTracesServer{stream})
}

type ArrowTracesService_ArrowTracesServer interface {
	Send(*BatchStatus) error
	Recv() (*BatchArrowRecords, error)
	grpc.ServerStream
}

type arrowTracesServiceArrowTracesServer struct {
	grpc.ServerStream
}

func (x *arrowTracesServiceArrowTracesServer) Send(m *BatchStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *arrowTracesServiceArrowTracesServer) Recv() (*BatchArrowRecords, error) {
	m := new(BatchArrowRecords)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArrowTracesService_ServiceDesc is the grpc.ServiceDesc for ArrowTracesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArrowTracesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opentelemetry.proto.experimental.arrow.v1.ArrowTracesService",
	HandlerType: (*ArrowTracesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ArrowTraces",
			Handler:       _ArrowTracesService_ArrowTraces_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "opentelemetry/proto/experimental/arrow/v1/arrow_service.proto",
}

// ArrowLogsServiceClient is the client API for ArrowLogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArrowLogsServiceClient interface {
	ArrowLogs(ctx context.Context, opts ...grpc.CallOption) (ArrowLogsService_ArrowLogsClient, error)
}

type arrowLogsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArrowLogsServiceClient(cc grpc.ClientConnInterface) ArrowLogsServiceClient {
	return &arrowLogsServiceClient{cc}
}

func (c *arrowLogsServiceClient) ArrowLogs(ctx context.Context, opts ...grpc.CallOption) (ArrowLogsService_ArrowLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArrowLogsService_ServiceDesc.Streams[0], "/opentelemetry.proto.experimental.arrow.v1.ArrowLogsService/ArrowLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &arrowLogsServiceArrowLogsClient{stream}
	return x, nil
}

type ArrowLogsService_ArrowLogsClient interface {
	Send(*BatchArrowRecords) error
	Recv() (*BatchStatus, error)
	grpc.ClientStream
}

type arrowLogsServiceArrowLogsClient struct {
	grpc.ClientStream
}

func (x *arrowLogsServiceArrowLogsClient) Send(m *BatchArrowRecords) error {
	return x.ClientStream.SendMsg(m)
}

func (x *arrowLogsServiceArrowLogsClient) Recv() (*BatchStatus, error) {
	m := new(BatchStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArrowLogsServiceServer is the server API for ArrowLogsService service.
// All implementations must embed UnimplementedArrowLogsServiceServer
// for forward compatibility
type ArrowLogsServiceServer interface {
	ArrowLogs(ArrowLogsService_ArrowLogsServer) error
	mustEmbedUnimplementedArrowLogsServiceServer()
}

// UnimplementedArrowLogsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArrowLogsServiceServer struct {
}

func (UnimplementedArrowLogsServiceServer) ArrowLogs(ArrowLogsService_ArrowLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method ArrowLogs not implemented")
}
func (UnimplementedArrowLogsServiceServer) mustEmbedUnimplementedArrowLogsServiceServer() {}

// UnsafeArrowLogsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArrowLogsServiceServer will
// result in compilation errors.
type UnsafeArrowLogsServiceServer interface {
	mustEmbedUnimplementedArrowLogsServiceServer()
}

func RegisterArrowLogsServiceServer(s grpc.ServiceRegistrar, srv ArrowLogsServiceServer) {
	s.RegisterService(&ArrowLogsService_ServiceDesc, srv)
}

func _ArrowLogsService_ArrowLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ArrowLogsServiceServer).ArrowLogs(&arrowLogsServiceArrowLogsServer{stream})
}

type ArrowLogsService_ArrowLogsServer interface {
	Send(*BatchStatus) error
	Recv() (*BatchArrowRecords, error)
	grpc.ServerStream
}

type arrowLogsServiceArrowLogsServer struct {
	grpc.ServerStream
}

func (x *arrowLogsServiceArrowLogsServer) Send(m *BatchStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *arrowLogsServiceArrowLogsServer) Recv() (*BatchArrowRecords, error) {
	m := new(BatchArrowRecords)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArrowLogsService_ServiceDesc is the grpc.ServiceDesc for ArrowLogsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArrowLogsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opentelemetry.proto.experimental.arrow.v1.ArrowLogsService",
	HandlerType: (*ArrowLogsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ArrowLogs",
			Handler:       _ArrowLogsService_ArrowLogs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "opentelemetry/proto/experimental/arrow/v1/arrow_service.proto",
}

// ArrowMetricsServiceClient is the client API for ArrowMetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArrowMetricsServiceClient interface {
	ArrowMetrics(ctx context.Context, opts ...grpc.CallOption) (ArrowMetricsService_ArrowMetricsClient, error)
}

type arrowMetricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArrowMetricsServiceClient(cc grpc.ClientConnInterface) ArrowMetricsServiceClient {
	return &arrowMetricsServiceClient{cc}
}

func (c *arrowMetricsServiceClient) ArrowMetrics(ctx context.Context, opts ...grpc.CallOption) (ArrowMetricsService_ArrowMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArrowMetricsService_ServiceDesc.Streams[0], "/opentelemetry.proto.experimental.arrow.v1.ArrowMetricsService/ArrowMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &arrowMetricsServiceArrowMetricsClient{stream}
	return x, nil
}

type ArrowMetricsService_ArrowMetricsClient interface {
	Send(*BatchArrowRecords) error
	Recv() (*BatchStatus, error)
	grpc.ClientStream
}

type arrowMetricsServiceArrowMetricsClient struct {
	grpc.ClientStream
}

func (x *arrowMetricsServiceArrowMetricsClient) Send(m *BatchArrowRecords) error {
	return x.ClientStream.SendMsg(m)
}

func (x *arrowMetricsServiceArrowMetricsClient) Recv() (*BatchStatus, error) {
	m := new(BatchStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArrowMetricsServiceServer is the server API for ArrowMetricsService service.
// All implementations must embed UnimplementedArrowMetricsServiceServer
// for forward compatibility
type ArrowMetricsServiceServer interface {
	ArrowMetrics(ArrowMetricsService_ArrowMetricsServer) error
	mustEmbedUnimplementedArrowMetricsServiceServer()
}

// UnimplementedArrowMetricsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArrowMetricsServiceServer struct {
}

func (UnimplementedArrowMetricsServiceServer) ArrowMetrics(ArrowMetricsService_ArrowMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method ArrowMetrics not implemented")
}
func (UnimplementedArrowMetricsServiceServer) mustEmbedUnimplementedArrowMetricsServiceServer() {}

// UnsafeArrowMetricsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArrowMetricsServiceServer will
// result in compilation errors.
type UnsafeArrowMetricsServiceServer interface {
	mustEmbedUnimplementedArrowMetricsServiceServer()
}

func RegisterArrowMetricsServiceServer(s grpc.ServiceRegistrar, srv ArrowMetricsServiceServer) {
	s.RegisterService(&ArrowMetricsService_ServiceDesc, srv)
}

func _ArrowMetricsService_ArrowMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ArrowMetricsServiceServer).ArrowMetrics(&arrowMetricsServiceArrowMetricsServer{stream})
}

type ArrowMetricsService_ArrowMetricsServer interface {
	Send(*BatchStatus) error
	Recv() (*BatchArrowRecords, error)
	grpc.ServerStream
}

type arrowMetricsServiceArrowMetricsServer struct {
	grpc.ServerStream
}

func (x *arrowMetricsServiceArrowMetricsServer) Send(m *BatchStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *arrowMetricsServiceArrowMetricsServer) Recv() (*BatchArrowRecords, error) {
	m := new(BatchArrowRecords)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArrowMetricsService_ServiceDesc is the grpc.ServiceDesc for ArrowMetricsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArrowMetricsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opentelemetry.proto.experimental.arrow.v1.ArrowMetricsService",
	HandlerType: (*ArrowMetricsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ArrowMetrics",
			Handler:       _ArrowMetricsService_ArrowMetrics_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "opentelemetry/proto/experimental/arrow/v1/arrow_service.proto",
}
