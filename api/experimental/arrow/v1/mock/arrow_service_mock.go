// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/open-telemetry/otel-arrow/api/experimental/arrow/v1 (interfaces: ArrowTracesServiceClient,ArrowTracesService_ArrowTracesClient,ArrowTracesServiceServer,ArrowTracesService_ArrowTracesServer,ArrowLogsServiceClient,ArrowLogsService_ArrowLogsClient,ArrowLogsServiceServer,ArrowLogsService_ArrowLogsServer,ArrowMetricsServiceClient,ArrowMetricsService_ArrowMetricsClient,ArrowMetricsServiceServer,ArrowMetricsService_ArrowMetricsServer)
//
// Generated by this command:
//
//	mockgen -package mock github.com/open-telemetry/otel-arrow/api/experimental/arrow/v1 ArrowTracesServiceClient,ArrowTracesService_ArrowTracesClient,ArrowTracesServiceServer,ArrowTracesService_ArrowTracesServer,ArrowLogsServiceClient,ArrowLogsService_ArrowLogsClient,ArrowLogsServiceServer,ArrowLogsService_ArrowLogsServer,ArrowMetricsServiceClient,ArrowMetricsService_ArrowMetricsClient,ArrowMetricsServiceServer,ArrowMetricsService_ArrowMetricsServer
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v1 "github.com/open-telemetry/otel-arrow/api/experimental/arrow/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockArrowTracesServiceClient is a mock of ArrowTracesServiceClient interface.
type MockArrowTracesServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockArrowTracesServiceClientMockRecorder
}

// MockArrowTracesServiceClientMockRecorder is the mock recorder for MockArrowTracesServiceClient.
type MockArrowTracesServiceClientMockRecorder struct {
	mock *MockArrowTracesServiceClient
}

// NewMockArrowTracesServiceClient creates a new mock instance.
func NewMockArrowTracesServiceClient(ctrl *gomock.Controller) *MockArrowTracesServiceClient {
	mock := &MockArrowTracesServiceClient{ctrl: ctrl}
	mock.recorder = &MockArrowTracesServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArrowTracesServiceClient) EXPECT() *MockArrowTracesServiceClientMockRecorder {
	return m.recorder
}

// ArrowTraces mocks base method.
func (m *MockArrowTracesServiceClient) ArrowTraces(arg0 context.Context, arg1 ...grpc.CallOption) (v1.ArrowTracesService_ArrowTracesClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ArrowTraces", varargs...)
	ret0, _ := ret[0].(v1.ArrowTracesService_ArrowTracesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArrowTraces indicates an expected call of ArrowTraces.
func (mr *MockArrowTracesServiceClientMockRecorder) ArrowTraces(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArrowTraces", reflect.TypeOf((*MockArrowTracesServiceClient)(nil).ArrowTraces), varargs...)
}

// MockArrowTracesService_ArrowTracesClient is a mock of ArrowTracesService_ArrowTracesClient interface.
type MockArrowTracesService_ArrowTracesClient struct {
	ctrl     *gomock.Controller
	recorder *MockArrowTracesService_ArrowTracesClientMockRecorder
}

// MockArrowTracesService_ArrowTracesClientMockRecorder is the mock recorder for MockArrowTracesService_ArrowTracesClient.
type MockArrowTracesService_ArrowTracesClientMockRecorder struct {
	mock *MockArrowTracesService_ArrowTracesClient
}

// NewMockArrowTracesService_ArrowTracesClient creates a new mock instance.
func NewMockArrowTracesService_ArrowTracesClient(ctrl *gomock.Controller) *MockArrowTracesService_ArrowTracesClient {
	mock := &MockArrowTracesService_ArrowTracesClient{ctrl: ctrl}
	mock.recorder = &MockArrowTracesService_ArrowTracesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArrowTracesService_ArrowTracesClient) EXPECT() *MockArrowTracesService_ArrowTracesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockArrowTracesService_ArrowTracesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockArrowTracesService_ArrowTracesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockArrowTracesService_ArrowTracesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockArrowTracesService_ArrowTracesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockArrowTracesService_ArrowTracesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockArrowTracesService_ArrowTracesClient)(nil).Context))
}

// Header mocks base method.
func (m *MockArrowTracesService_ArrowTracesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockArrowTracesService_ArrowTracesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockArrowTracesService_ArrowTracesClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockArrowTracesService_ArrowTracesClient) Recv() (*v1.BatchStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.BatchStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockArrowTracesService_ArrowTracesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockArrowTracesService_ArrowTracesClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockArrowTracesService_ArrowTracesClient) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockArrowTracesService_ArrowTracesClientMockRecorder) RecvMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockArrowTracesService_ArrowTracesClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockArrowTracesService_ArrowTracesClient) Send(arg0 *v1.BatchArrowRecords) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockArrowTracesService_ArrowTracesClientMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockArrowTracesService_ArrowTracesClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockArrowTracesService_ArrowTracesClient) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockArrowTracesService_ArrowTracesClientMockRecorder) SendMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockArrowTracesService_ArrowTracesClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockArrowTracesService_ArrowTracesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockArrowTracesService_ArrowTracesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockArrowTracesService_ArrowTracesClient)(nil).Trailer))
}

// MockArrowTracesServiceServer is a mock of ArrowTracesServiceServer interface.
type MockArrowTracesServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockArrowTracesServiceServerMockRecorder
}

// MockArrowTracesServiceServerMockRecorder is the mock recorder for MockArrowTracesServiceServer.
type MockArrowTracesServiceServerMockRecorder struct {
	mock *MockArrowTracesServiceServer
}

// NewMockArrowTracesServiceServer creates a new mock instance.
func NewMockArrowTracesServiceServer(ctrl *gomock.Controller) *MockArrowTracesServiceServer {
	mock := &MockArrowTracesServiceServer{ctrl: ctrl}
	mock.recorder = &MockArrowTracesServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArrowTracesServiceServer) EXPECT() *MockArrowTracesServiceServerMockRecorder {
	return m.recorder
}

// ArrowTraces mocks base method.
func (m *MockArrowTracesServiceServer) ArrowTraces(arg0 v1.ArrowTracesService_ArrowTracesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArrowTraces", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArrowTraces indicates an expected call of ArrowTraces.
func (mr *MockArrowTracesServiceServerMockRecorder) ArrowTraces(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArrowTraces", reflect.TypeOf((*MockArrowTracesServiceServer)(nil).ArrowTraces), arg0)
}

// mustEmbedUnimplementedArrowTracesServiceServer mocks base method.
func (m *MockArrowTracesServiceServer) mustEmbedUnimplementedArrowTracesServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedArrowTracesServiceServer")
}

// mustEmbedUnimplementedArrowTracesServiceServer indicates an expected call of mustEmbedUnimplementedArrowTracesServiceServer.
func (mr *MockArrowTracesServiceServerMockRecorder) mustEmbedUnimplementedArrowTracesServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedArrowTracesServiceServer", reflect.TypeOf((*MockArrowTracesServiceServer)(nil).mustEmbedUnimplementedArrowTracesServiceServer))
}

// MockArrowTracesService_ArrowTracesServer is a mock of ArrowTracesService_ArrowTracesServer interface.
type MockArrowTracesService_ArrowTracesServer struct {
	ctrl     *gomock.Controller
	recorder *MockArrowTracesService_ArrowTracesServerMockRecorder
}

// MockArrowTracesService_ArrowTracesServerMockRecorder is the mock recorder for MockArrowTracesService_ArrowTracesServer.
type MockArrowTracesService_ArrowTracesServerMockRecorder struct {
	mock *MockArrowTracesService_ArrowTracesServer
}

// NewMockArrowTracesService_ArrowTracesServer creates a new mock instance.
func NewMockArrowTracesService_ArrowTracesServer(ctrl *gomock.Controller) *MockArrowTracesService_ArrowTracesServer {
	mock := &MockArrowTracesService_ArrowTracesServer{ctrl: ctrl}
	mock.recorder = &MockArrowTracesService_ArrowTracesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArrowTracesService_ArrowTracesServer) EXPECT() *MockArrowTracesService_ArrowTracesServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockArrowTracesService_ArrowTracesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockArrowTracesService_ArrowTracesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockArrowTracesService_ArrowTracesServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockArrowTracesService_ArrowTracesServer) Recv() (*v1.BatchArrowRecords, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.BatchArrowRecords)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockArrowTracesService_ArrowTracesServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockArrowTracesService_ArrowTracesServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockArrowTracesService_ArrowTracesServer) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockArrowTracesService_ArrowTracesServerMockRecorder) RecvMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockArrowTracesService_ArrowTracesServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockArrowTracesService_ArrowTracesServer) Send(arg0 *v1.BatchStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockArrowTracesService_ArrowTracesServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockArrowTracesService_ArrowTracesServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockArrowTracesService_ArrowTracesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockArrowTracesService_ArrowTracesServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockArrowTracesService_ArrowTracesServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockArrowTracesService_ArrowTracesServer) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockArrowTracesService_ArrowTracesServerMockRecorder) SendMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockArrowTracesService_ArrowTracesServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockArrowTracesService_ArrowTracesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockArrowTracesService_ArrowTracesServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockArrowTracesService_ArrowTracesServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockArrowTracesService_ArrowTracesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockArrowTracesService_ArrowTracesServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockArrowTracesService_ArrowTracesServer)(nil).SetTrailer), arg0)
}

// MockArrowLogsServiceClient is a mock of ArrowLogsServiceClient interface.
type MockArrowLogsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockArrowLogsServiceClientMockRecorder
}

// MockArrowLogsServiceClientMockRecorder is the mock recorder for MockArrowLogsServiceClient.
type MockArrowLogsServiceClientMockRecorder struct {
	mock *MockArrowLogsServiceClient
}

// NewMockArrowLogsServiceClient creates a new mock instance.
func NewMockArrowLogsServiceClient(ctrl *gomock.Controller) *MockArrowLogsServiceClient {
	mock := &MockArrowLogsServiceClient{ctrl: ctrl}
	mock.recorder = &MockArrowLogsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArrowLogsServiceClient) EXPECT() *MockArrowLogsServiceClientMockRecorder {
	return m.recorder
}

// ArrowLogs mocks base method.
func (m *MockArrowLogsServiceClient) ArrowLogs(arg0 context.Context, arg1 ...grpc.CallOption) (v1.ArrowLogsService_ArrowLogsClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ArrowLogs", varargs...)
	ret0, _ := ret[0].(v1.ArrowLogsService_ArrowLogsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArrowLogs indicates an expected call of ArrowLogs.
func (mr *MockArrowLogsServiceClientMockRecorder) ArrowLogs(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArrowLogs", reflect.TypeOf((*MockArrowLogsServiceClient)(nil).ArrowLogs), varargs...)
}

// MockArrowLogsService_ArrowLogsClient is a mock of ArrowLogsService_ArrowLogsClient interface.
type MockArrowLogsService_ArrowLogsClient struct {
	ctrl     *gomock.Controller
	recorder *MockArrowLogsService_ArrowLogsClientMockRecorder
}

// MockArrowLogsService_ArrowLogsClientMockRecorder is the mock recorder for MockArrowLogsService_ArrowLogsClient.
type MockArrowLogsService_ArrowLogsClientMockRecorder struct {
	mock *MockArrowLogsService_ArrowLogsClient
}

// NewMockArrowLogsService_ArrowLogsClient creates a new mock instance.
func NewMockArrowLogsService_ArrowLogsClient(ctrl *gomock.Controller) *MockArrowLogsService_ArrowLogsClient {
	mock := &MockArrowLogsService_ArrowLogsClient{ctrl: ctrl}
	mock.recorder = &MockArrowLogsService_ArrowLogsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArrowLogsService_ArrowLogsClient) EXPECT() *MockArrowLogsService_ArrowLogsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockArrowLogsService_ArrowLogsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockArrowLogsService_ArrowLogsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockArrowLogsService_ArrowLogsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockArrowLogsService_ArrowLogsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockArrowLogsService_ArrowLogsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockArrowLogsService_ArrowLogsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockArrowLogsService_ArrowLogsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockArrowLogsService_ArrowLogsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockArrowLogsService_ArrowLogsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockArrowLogsService_ArrowLogsClient) Recv() (*v1.BatchStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.BatchStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockArrowLogsService_ArrowLogsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockArrowLogsService_ArrowLogsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockArrowLogsService_ArrowLogsClient) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockArrowLogsService_ArrowLogsClientMockRecorder) RecvMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockArrowLogsService_ArrowLogsClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockArrowLogsService_ArrowLogsClient) Send(arg0 *v1.BatchArrowRecords) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockArrowLogsService_ArrowLogsClientMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockArrowLogsService_ArrowLogsClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockArrowLogsService_ArrowLogsClient) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockArrowLogsService_ArrowLogsClientMockRecorder) SendMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockArrowLogsService_ArrowLogsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockArrowLogsService_ArrowLogsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockArrowLogsService_ArrowLogsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockArrowLogsService_ArrowLogsClient)(nil).Trailer))
}

// MockArrowLogsServiceServer is a mock of ArrowLogsServiceServer interface.
type MockArrowLogsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockArrowLogsServiceServerMockRecorder
}

// MockArrowLogsServiceServerMockRecorder is the mock recorder for MockArrowLogsServiceServer.
type MockArrowLogsServiceServerMockRecorder struct {
	mock *MockArrowLogsServiceServer
}

// NewMockArrowLogsServiceServer creates a new mock instance.
func NewMockArrowLogsServiceServer(ctrl *gomock.Controller) *MockArrowLogsServiceServer {
	mock := &MockArrowLogsServiceServer{ctrl: ctrl}
	mock.recorder = &MockArrowLogsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArrowLogsServiceServer) EXPECT() *MockArrowLogsServiceServerMockRecorder {
	return m.recorder
}

// ArrowLogs mocks base method.
func (m *MockArrowLogsServiceServer) ArrowLogs(arg0 v1.ArrowLogsService_ArrowLogsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArrowLogs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArrowLogs indicates an expected call of ArrowLogs.
func (mr *MockArrowLogsServiceServerMockRecorder) ArrowLogs(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArrowLogs", reflect.TypeOf((*MockArrowLogsServiceServer)(nil).ArrowLogs), arg0)
}

// mustEmbedUnimplementedArrowLogsServiceServer mocks base method.
func (m *MockArrowLogsServiceServer) mustEmbedUnimplementedArrowLogsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedArrowLogsServiceServer")
}

// mustEmbedUnimplementedArrowLogsServiceServer indicates an expected call of mustEmbedUnimplementedArrowLogsServiceServer.
func (mr *MockArrowLogsServiceServerMockRecorder) mustEmbedUnimplementedArrowLogsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedArrowLogsServiceServer", reflect.TypeOf((*MockArrowLogsServiceServer)(nil).mustEmbedUnimplementedArrowLogsServiceServer))
}

// MockArrowLogsService_ArrowLogsServer is a mock of ArrowLogsService_ArrowLogsServer interface.
type MockArrowLogsService_ArrowLogsServer struct {
	ctrl     *gomock.Controller
	recorder *MockArrowLogsService_ArrowLogsServerMockRecorder
}

// MockArrowLogsService_ArrowLogsServerMockRecorder is the mock recorder for MockArrowLogsService_ArrowLogsServer.
type MockArrowLogsService_ArrowLogsServerMockRecorder struct {
	mock *MockArrowLogsService_ArrowLogsServer
}

// NewMockArrowLogsService_ArrowLogsServer creates a new mock instance.
func NewMockArrowLogsService_ArrowLogsServer(ctrl *gomock.Controller) *MockArrowLogsService_ArrowLogsServer {
	mock := &MockArrowLogsService_ArrowLogsServer{ctrl: ctrl}
	mock.recorder = &MockArrowLogsService_ArrowLogsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArrowLogsService_ArrowLogsServer) EXPECT() *MockArrowLogsService_ArrowLogsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockArrowLogsService_ArrowLogsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockArrowLogsService_ArrowLogsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockArrowLogsService_ArrowLogsServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockArrowLogsService_ArrowLogsServer) Recv() (*v1.BatchArrowRecords, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.BatchArrowRecords)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockArrowLogsService_ArrowLogsServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockArrowLogsService_ArrowLogsServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockArrowLogsService_ArrowLogsServer) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockArrowLogsService_ArrowLogsServerMockRecorder) RecvMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockArrowLogsService_ArrowLogsServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockArrowLogsService_ArrowLogsServer) Send(arg0 *v1.BatchStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockArrowLogsService_ArrowLogsServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockArrowLogsService_ArrowLogsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockArrowLogsService_ArrowLogsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockArrowLogsService_ArrowLogsServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockArrowLogsService_ArrowLogsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockArrowLogsService_ArrowLogsServer) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockArrowLogsService_ArrowLogsServerMockRecorder) SendMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockArrowLogsService_ArrowLogsServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockArrowLogsService_ArrowLogsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockArrowLogsService_ArrowLogsServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockArrowLogsService_ArrowLogsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockArrowLogsService_ArrowLogsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockArrowLogsService_ArrowLogsServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockArrowLogsService_ArrowLogsServer)(nil).SetTrailer), arg0)
}

// MockArrowMetricsServiceClient is a mock of ArrowMetricsServiceClient interface.
type MockArrowMetricsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockArrowMetricsServiceClientMockRecorder
}

// MockArrowMetricsServiceClientMockRecorder is the mock recorder for MockArrowMetricsServiceClient.
type MockArrowMetricsServiceClientMockRecorder struct {
	mock *MockArrowMetricsServiceClient
}

// NewMockArrowMetricsServiceClient creates a new mock instance.
func NewMockArrowMetricsServiceClient(ctrl *gomock.Controller) *MockArrowMetricsServiceClient {
	mock := &MockArrowMetricsServiceClient{ctrl: ctrl}
	mock.recorder = &MockArrowMetricsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArrowMetricsServiceClient) EXPECT() *MockArrowMetricsServiceClientMockRecorder {
	return m.recorder
}

// ArrowMetrics mocks base method.
func (m *MockArrowMetricsServiceClient) ArrowMetrics(arg0 context.Context, arg1 ...grpc.CallOption) (v1.ArrowMetricsService_ArrowMetricsClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ArrowMetrics", varargs...)
	ret0, _ := ret[0].(v1.ArrowMetricsService_ArrowMetricsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArrowMetrics indicates an expected call of ArrowMetrics.
func (mr *MockArrowMetricsServiceClientMockRecorder) ArrowMetrics(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArrowMetrics", reflect.TypeOf((*MockArrowMetricsServiceClient)(nil).ArrowMetrics), varargs...)
}

// MockArrowMetricsService_ArrowMetricsClient is a mock of ArrowMetricsService_ArrowMetricsClient interface.
type MockArrowMetricsService_ArrowMetricsClient struct {
	ctrl     *gomock.Controller
	recorder *MockArrowMetricsService_ArrowMetricsClientMockRecorder
}

// MockArrowMetricsService_ArrowMetricsClientMockRecorder is the mock recorder for MockArrowMetricsService_ArrowMetricsClient.
type MockArrowMetricsService_ArrowMetricsClientMockRecorder struct {
	mock *MockArrowMetricsService_ArrowMetricsClient
}

// NewMockArrowMetricsService_ArrowMetricsClient creates a new mock instance.
func NewMockArrowMetricsService_ArrowMetricsClient(ctrl *gomock.Controller) *MockArrowMetricsService_ArrowMetricsClient {
	mock := &MockArrowMetricsService_ArrowMetricsClient{ctrl: ctrl}
	mock.recorder = &MockArrowMetricsService_ArrowMetricsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArrowMetricsService_ArrowMetricsClient) EXPECT() *MockArrowMetricsService_ArrowMetricsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockArrowMetricsService_ArrowMetricsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockArrowMetricsService_ArrowMetricsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockArrowMetricsService_ArrowMetricsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockArrowMetricsService_ArrowMetricsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockArrowMetricsService_ArrowMetricsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockArrowMetricsService_ArrowMetricsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockArrowMetricsService_ArrowMetricsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockArrowMetricsService_ArrowMetricsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockArrowMetricsService_ArrowMetricsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockArrowMetricsService_ArrowMetricsClient) Recv() (*v1.BatchStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.BatchStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockArrowMetricsService_ArrowMetricsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockArrowMetricsService_ArrowMetricsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockArrowMetricsService_ArrowMetricsClient) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockArrowMetricsService_ArrowMetricsClientMockRecorder) RecvMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockArrowMetricsService_ArrowMetricsClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockArrowMetricsService_ArrowMetricsClient) Send(arg0 *v1.BatchArrowRecords) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockArrowMetricsService_ArrowMetricsClientMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockArrowMetricsService_ArrowMetricsClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockArrowMetricsService_ArrowMetricsClient) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockArrowMetricsService_ArrowMetricsClientMockRecorder) SendMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockArrowMetricsService_ArrowMetricsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockArrowMetricsService_ArrowMetricsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockArrowMetricsService_ArrowMetricsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockArrowMetricsService_ArrowMetricsClient)(nil).Trailer))
}

// MockArrowMetricsServiceServer is a mock of ArrowMetricsServiceServer interface.
type MockArrowMetricsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockArrowMetricsServiceServerMockRecorder
}

// MockArrowMetricsServiceServerMockRecorder is the mock recorder for MockArrowMetricsServiceServer.
type MockArrowMetricsServiceServerMockRecorder struct {
	mock *MockArrowMetricsServiceServer
}

// NewMockArrowMetricsServiceServer creates a new mock instance.
func NewMockArrowMetricsServiceServer(ctrl *gomock.Controller) *MockArrowMetricsServiceServer {
	mock := &MockArrowMetricsServiceServer{ctrl: ctrl}
	mock.recorder = &MockArrowMetricsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArrowMetricsServiceServer) EXPECT() *MockArrowMetricsServiceServerMockRecorder {
	return m.recorder
}

// ArrowMetrics mocks base method.
func (m *MockArrowMetricsServiceServer) ArrowMetrics(arg0 v1.ArrowMetricsService_ArrowMetricsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArrowMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArrowMetrics indicates an expected call of ArrowMetrics.
func (mr *MockArrowMetricsServiceServerMockRecorder) ArrowMetrics(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArrowMetrics", reflect.TypeOf((*MockArrowMetricsServiceServer)(nil).ArrowMetrics), arg0)
}

// mustEmbedUnimplementedArrowMetricsServiceServer mocks base method.
func (m *MockArrowMetricsServiceServer) mustEmbedUnimplementedArrowMetricsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedArrowMetricsServiceServer")
}

// mustEmbedUnimplementedArrowMetricsServiceServer indicates an expected call of mustEmbedUnimplementedArrowMetricsServiceServer.
func (mr *MockArrowMetricsServiceServerMockRecorder) mustEmbedUnimplementedArrowMetricsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedArrowMetricsServiceServer", reflect.TypeOf((*MockArrowMetricsServiceServer)(nil).mustEmbedUnimplementedArrowMetricsServiceServer))
}

// MockArrowMetricsService_ArrowMetricsServer is a mock of ArrowMetricsService_ArrowMetricsServer interface.
type MockArrowMetricsService_ArrowMetricsServer struct {
	ctrl     *gomock.Controller
	recorder *MockArrowMetricsService_ArrowMetricsServerMockRecorder
}

// MockArrowMetricsService_ArrowMetricsServerMockRecorder is the mock recorder for MockArrowMetricsService_ArrowMetricsServer.
type MockArrowMetricsService_ArrowMetricsServerMockRecorder struct {
	mock *MockArrowMetricsService_ArrowMetricsServer
}

// NewMockArrowMetricsService_ArrowMetricsServer creates a new mock instance.
func NewMockArrowMetricsService_ArrowMetricsServer(ctrl *gomock.Controller) *MockArrowMetricsService_ArrowMetricsServer {
	mock := &MockArrowMetricsService_ArrowMetricsServer{ctrl: ctrl}
	mock.recorder = &MockArrowMetricsService_ArrowMetricsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArrowMetricsService_ArrowMetricsServer) EXPECT() *MockArrowMetricsService_ArrowMetricsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockArrowMetricsService_ArrowMetricsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockArrowMetricsService_ArrowMetricsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockArrowMetricsService_ArrowMetricsServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockArrowMetricsService_ArrowMetricsServer) Recv() (*v1.BatchArrowRecords, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.BatchArrowRecords)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockArrowMetricsService_ArrowMetricsServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockArrowMetricsService_ArrowMetricsServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockArrowMetricsService_ArrowMetricsServer) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockArrowMetricsService_ArrowMetricsServerMockRecorder) RecvMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockArrowMetricsService_ArrowMetricsServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockArrowMetricsService_ArrowMetricsServer) Send(arg0 *v1.BatchStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockArrowMetricsService_ArrowMetricsServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockArrowMetricsService_ArrowMetricsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockArrowMetricsService_ArrowMetricsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockArrowMetricsService_ArrowMetricsServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockArrowMetricsService_ArrowMetricsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockArrowMetricsService_ArrowMetricsServer) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockArrowMetricsService_ArrowMetricsServerMockRecorder) SendMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockArrowMetricsService_ArrowMetricsServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockArrowMetricsService_ArrowMetricsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockArrowMetricsService_ArrowMetricsServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockArrowMetricsService_ArrowMetricsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockArrowMetricsService_ArrowMetricsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockArrowMetricsService_ArrowMetricsServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockArrowMetricsService_ArrowMetricsServer)(nil).SetTrailer), arg0)
}
