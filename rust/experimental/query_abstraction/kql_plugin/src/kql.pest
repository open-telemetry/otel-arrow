// These two special rules, when defined, are implicitly allowed at:
// - at every sequence (split by ~)
// - between every repetition (+ or *)
// Atomics (marked with @) are excluded
// See https://pest.rs/book/grammars/syntax.html#implicit-whitespace
WHITESPACE = _{ " " }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// Basic tokens
// ----------------------------------------------
true_token = @{ "true" }
false_token = @{ "false" }
integer_token = @{ 
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
}
string_token = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
equals_token = @{ "==" }
not_equals_token = @{ "!=" }
comma_token = @{ "," }
and_token = @{ "and" }
or_token = @{ "or" }
greater_than_token = @{ ">" ~ !"=" }
less_than_token = @{ "<" ~ !"=" }
greater_than_or_equal_to_token = @{ ">=" }
less_than_or_equal_to_token = @{ "<=" }
open_paren_token = @{ "(" }
close_paren_token = @{ ")" }
not_token = @{ "not" }
where_token = @{ "where" }
// ----------------------------------------------

// Basic Grammar
// ----------------------------------------------
literal = { true_token | false_token | integer_token | string_token }
identifier = @{ ("_" | ASCII_ALPHANUMERIC)+ }

expression_base = { identifier | literal | enclosed_expression }

enclosed_expression = { open_paren_token ~ expression ~ close_paren_token }

not_expression = { not_token ~ enclosed_expression }
and_expression = { expression_base ~ (and_token ~ expression)+ }
or_expression = { expression_base ~  (or_token ~ expression)+ }

equals_expression = { expression_base ~ equals_token ~ expression }
not_equals_expression = { expression_base ~ not_equals_token ~ expression }
greater_than_expression = { expression_base ~ greater_than_token ~ expression }
less_than_expression = { expression_base ~ less_than_token ~ expression }
greater_than_or_equal_to_expression = { expression_base ~ greater_than_or_equal_to_token ~ expression }
less_than_or_equal_to_expression = { expression_base ~ less_than_or_equal_to_token ~ expression }

boolean_expression = {
    not_expression
    | and_expression
    | or_expression
}

comparison_expression = {
    equals_expression
    | not_equals_expression
    | greater_than_expression
    | less_than_expression
    | greater_than_or_equal_to_expression
    | less_than_or_equal_to_expression
}

conditional_expression = {
    boolean_expression
    | comparison_expression
}

expression = { 
    conditional_expression
    | enclosed_expression
    | literal
    | identifier 
}
// ----------------------------------------------

// KQL-specific Tokens
// ----------------------------------------------
assignment_token = @{ "=" ~ !"=" }
extend_token = @{ "extend" }
pipe_token = @{ "|" ~ !"|" }
// ----------------------------------------------

// KQL-specific Grammar
// ----------------------------------------------
assignment_expression = { identifier ~ assignment_token ~ expression }

filter_expression = { where_token ~ conditional_expression }
extend_expression = { extend_token ~ assignment_expression ~ (comma_token ~ assignment_expression)* }

logical_expression = {
    filter_expression
    | extend_expression
}

statement = { pipe_token ~ logical_expression }

query = { 
    SOI ~ identifier ~ EOI
    | SOI ~ identifier ~ (NEWLINE* ~ statement)+ ~ NEWLINE* ~ EOI
}
// ----------------------------------------------