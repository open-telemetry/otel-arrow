            // Drop the SendError
            .map_err(|e| Error::PipelineControlMsgError {
                error: e.to_string(),
            })
impl<PData> TryFrom<TypedError<NodeControlMsg<PData>>> for AckMsg<PData> {
    type Error = TypedError<NodeControlMsg<PData>>;
    fn try_from(value: TypedError<NodeControlMsg<PData>>) -> Result<Self, Self::Error> {
        match value {
            TypedError::NodeControlMsgSendError { error, node_id } => match error {
                SendError::Full(NodeControlMsg::Ack(ack)) => Ok(ack),
                SendError::Closed(NodeControlMsg::Ack(ack)) => Ok(ack),
                error => Err(TypedError::NodeControlMsgSendError { error, node_id }),
            },
            error => Err(error),
        }
    }
}

impl<PData> TryFrom<TypedError<PipelineControlMsg<PData>>> for AckMsg<PData> {
    type Error = TypedError<PipelineControlMsg<PData>>;
    fn try_from(value: TypedError<PipelineControlMsg<PData>>) -> Result<Self, Self::Error> {
        match value {
            TypedError::PipelineControlMsgError(error) => match error {
                SendError::Full(PipelineControlMsg::DeliverAck { ack, .. }) => Ok(ack),
                SendError::Closed(PipelineControlMsg::DeliverAck { ack, .. }) => Ok(ack),
                error => Err(TypedError::PipelineControlMsgError(error)),
            },
            error => Err(error),
        }
    }
}

