[workspace]
members = [
    "benchmarks",
    "crates/*",
    "xtask"
]
resolver = "2"

[workspace.package]
version = "0.1.0"
authors = ["OpenTelemetry"]
edition = "2024"
repository = "https://github.com/open-telemetry/otel-arrow"
license = "Apache-2.0"
publish = false
rust-version = "1.87.0"

[package]
name = "otap-df"
version = "0.1.0"
description = "OpenTelemetry Rust Dataflow Engine supporting natively OTLP and OTAP Data Formats"
edition.workspace = true
repository.workspace = true
license.workspace = true
keywords = ["OpenTelemetry", "OTLP", "OTAP", "Dataflow", "Engine"]
categories = ["asynchronous", "network-programming"]

[[bin]]
name = "df_engine"
path = "src/main.rs"

[dependencies]
otap-df-config = { path = "crates/config" }
otap-df-controller = { path = "crates/controller" }
otap-df-otap = { path = "crates/otap" }
thiserror.workspace = true
serde_json.workspace = true
clap.workspace = true
mimalloc-rust.workspace = true

[workspace.dependencies]

arrayvec = "0.7.6"
arrow = "56.1"
arrow-ipc = { version = "56.1", features=["zstd"] }
async-stream = "0.3.6"
async-trait = "0.1.88"
async-unsync = "0.3.0"
axum = "0.8.4"
bitflags = "2.9"
bytemuck = "1.23"
chrono = { version = "0.4", features = ["serde"] }
ciborium = "0.2.2"
clap = { version = "4.5.42", features = ["derive"] }
core_affinity = "0.8.3"
criterion = "0.7.0"
data-encoding = "2.9.0"
fluke-hpack = "0.3.1"
flume = { version = "0.11.1", default-features = false, features = ["async"] }
futures = "0.3.31"
futures-channel = "0.3"
futures-timer = "3.0"
http = "1.3"
humantime = "2.2.0"
humantime-serde = "1.1.1"
linkme = "0.3.33"
local-sync = "0.1.1"
log = "0.4"
miette = { version="7.6.0", features = ["fancy"] }
mimalloc-rust = "0.2.1"
object_store = "0.12.3"
once_cell = "1.20.2"
otel-arrow-rust = { path = "../otel-arrow-rust"}
parking_lot = "0.12.4"
parquet = { version = "56.1", default-features = false, features = ["arrow", "async", "object_store"]}
portpicker = "0.1.1"
pretty_assertions = "1.4.1"
proc-macro2 = "1.0"
prost = "0.14"
quote = "1.0"
rand = "0.9.2"
schemars = { version = "1.0.0" }
serde = { version = "1.0.219", features = ["derive", "rc"] }
serde_cbor = "0.11.2"
serde_json = { version = "1.0.142" }
serde_yaml = "0.9.34+deprecated"        # Deprecated, but no good alternative yet
simdutf8 = "0.1.5"
slotmap = "1.0.7"
smallvec = "1.15"
socket2 = { version = "0.6.0", features = ["all"] }
syn = { version = "2.0", features = ["full", "extra-traits"] }
tempfile = "3"
thiserror = "2.0.12"
tokio = { version = "1.46.1", features = ["rt", "time", "net", "io-util", "sync", "macros", "rt-multi-thread", "fs", "io-std"] }
tokio-stream = "0.1.17"
tokio-util = { version = "0.7.16" }
tonic = { version = "0.14", default-features = false, features = [
    "channel",
    "codegen",
    "deflate",
    "gzip",
    "router",
    "server",
    "transport",
    "zstd",
] }
tonic-middleware = "0.4.0"
tonic-prost = "0.14"
tower = "0.5.2"
tower-service = "0.3"
trybuild = "1.0"
unsync = "0.1.2"
url = "2.5.7"
urn = "0.7"
uuid = { version = "1.17.0", features = ["v4", "v7"] }
weaver_common = { git = "https://github.com/open-telemetry/weaver.git", tag = "v0.17.0"}
weaver_forge = { git = "https://github.com/open-telemetry/weaver.git", tag = "v0.17.0" }
weaver_resolved_schema = { git = "https://github.com/open-telemetry/weaver.git", tag = "v0.17.0"}
weaver_resolver = { git = "https://github.com/open-telemetry/weaver.git", tag = "v0.17.0"}
weaver_semconv = { git = "https://github.com/open-telemetry/weaver.git", tag = "v0.17.0"}
zip = "=4.2.0"

[features]
default = []
unsafe-optimizations = ["unchecked-index", "unchecked-arithmetic"]
unchecked-index = []
unchecked-arithmetic = []

[workspace.lints.rust]
# General compatibility lints
rust_2018_idioms = { level = "warn", priority = -1 }
rust_2021_compatibility = { level = "warn", priority = -1 }
rust_2024_compatibility = { level = "warn", priority = -1 }
future_incompatible = { level = "warn", priority = -1 }
nonstandard_style = { level = "warn", priority = -1 }

# Strict safety & quality standards
missing_docs = "deny"
unsafe_code = "deny"
unstable_features = "deny"
unused_import_braces = "deny"
unused_qualifications = "deny"
unused_results = "deny"
trivial_numeric_casts = "deny"
variant_size_differences = "deny"
unused_extern_crates = "deny"

# Additional helpful warnings
unused_lifetimes = "warn"
semicolon_in_expressions_from_macros = "warn"
unsafe_op_in_unsafe_fn = "warn"
unused_macro_rules = "warn"

[workspace.lints.clippy]
# Strong defaults: deny problematic patterns
cargo = { level = "deny", priority = -1 }
correctness = { level = "deny", priority = -1 }
perf = { level = "deny", priority = -1 }
complexity = { level = "warn", priority = -1 }
style = { level = "warn", priority = -1 }
suspicious = { level = "warn", priority = -1 }
restriction = { level = "allow", priority = -1 }

# Specific Clippy lint customizations
unwrap_used = "deny"
print_stdout = "deny"
print_stderr = "deny"
must-use-candidate = "warn"
await_holding_lock = "warn"
manual_async_fn = "warn"
dbg_macro = "warn"
explicit_into_iter_loop = "warn"

# Explicitly allowed practical exceptions
multiple_crate_versions = "allow"
too_many_arguments = "allow"
type_complexity = "allow"
wrong_self_convention = "allow"
module_name_repetitions = "allow"

[workspace.lints.rustdoc]
broken_intra_doc_links = "deny"
missing_crate_level_docs = "deny"

[profile.release]
debug = "line-tables-only"  # minimum required for profiling

# A more in-depth analysis is necessary to determine the optimal parameters for the release profile.
#[profile.release]
#lto = "thin"
#strip = true

[profile.bench]
inherits = "release"
# Potentially override lto for faster builds:
# lto = "thin"
# Potentially override debug/strip for easier debugging:
# debug = true
# strip = "none"

# cargo build --profile release-debug
[profile.release-debug]
inherits = "release"
debug = true  # Or 2 for full debug info
strip = "none" # Keep symbols and debug info
panic = "unwind"