// This file is @generated by prost-build.
#[crate::pdata::otlp::qualified("opentelemetry.proto.metrics.v1.MetricsData")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetricsData {
    #[prost(message, repeated, tag="1")]
    pub resource_metrics: ::prost::alloc::vec::Vec<ResourceMetrics>,
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.metrics.v1.ResourceMetrics")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceMetrics {
    #[prost(message, optional, tag="1")]
    pub resource: ::core::option::Option<super::super::resource::v1::Resource>,
    #[prost(message, repeated, tag="2")]
    pub scope_metrics: ::prost::alloc::vec::Vec<ScopeMetrics>,
    #[prost(string, tag="3")]
    pub schema_url: ::prost::alloc::string::String,
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.metrics.v1.ScopeMetrics")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScopeMetrics {
    #[prost(message, optional, tag="1")]
    pub scope: ::core::option::Option<super::super::common::v1::InstrumentationScope>,
    #[prost(message, repeated, tag="2")]
    pub metrics: ::prost::alloc::vec::Vec<Metric>,
    #[prost(string, tag="3")]
    pub schema_url: ::prost::alloc::string::String,
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.metrics.v1.Metric")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Metric {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub unit: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="12")]
    pub metadata: ::prost::alloc::vec::Vec<super::super::common::v1::KeyValue>,
    #[prost(oneof="metric::Data", tags="5, 7, 9, 10, 11")]
    pub data: ::core::option::Option<metric::Data>,
}
/// Nested message and enum types in `Metric`.
pub mod metric {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        #[prost(message, tag="5")]
        Gauge(super::Gauge),
        #[prost(message, tag="7")]
        Sum(super::Sum),
        #[prost(message, tag="9")]
        Histogram(super::Histogram),
        #[prost(message, tag="10")]
        ExponentialHistogram(super::ExponentialHistogram),
        #[prost(message, tag="11")]
        Summary(super::Summary),
    }
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.metrics.v1.Gauge")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gauge {
    #[prost(message, repeated, tag="1")]
    pub data_points: ::prost::alloc::vec::Vec<NumberDataPoint>,
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.metrics.v1.Sum")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sum {
    #[prost(message, repeated, tag="1")]
    pub data_points: ::prost::alloc::vec::Vec<NumberDataPoint>,
    #[prost(enumeration="AggregationTemporality", tag="2")]
    pub aggregation_temporality: i32,
    #[prost(bool, tag="3")]
    pub is_monotonic: bool,
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.metrics.v1.Histogram")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Histogram {
    #[prost(message, repeated, tag="1")]
    pub data_points: ::prost::alloc::vec::Vec<HistogramDataPoint>,
    #[prost(enumeration="AggregationTemporality", tag="2")]
    pub aggregation_temporality: i32,
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.metrics.v1.ExponentialHistogram")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExponentialHistogram {
    #[prost(message, repeated, tag="1")]
    pub data_points: ::prost::alloc::vec::Vec<ExponentialHistogramDataPoint>,
    #[prost(enumeration="AggregationTemporality", tag="2")]
    pub aggregation_temporality: i32,
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.metrics.v1.Summary")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Summary {
    #[prost(message, repeated, tag="1")]
    pub data_points: ::prost::alloc::vec::Vec<SummaryDataPoint>,
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.metrics.v1.NumberDataPoint")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NumberDataPoint {
    #[prost(message, repeated, tag="7")]
    pub attributes: ::prost::alloc::vec::Vec<super::super::common::v1::KeyValue>,
    #[prost(fixed64, tag="2")]
    pub start_time_unix_nano: u64,
    #[prost(fixed64, tag="3")]
    pub time_unix_nano: u64,
    #[prost(message, repeated, tag="5")]
    pub exemplars: ::prost::alloc::vec::Vec<Exemplar>,
    #[prost(uint32, tag="8")]
    pub flags: u32,
    #[prost(oneof="number_data_point::Value", tags="4, 6")]
    pub value: ::core::option::Option<number_data_point::Value>,
}
/// Nested message and enum types in `NumberDataPoint`.
pub mod number_data_point {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(double, tag="4")]
        AsDouble(f64),
        #[prost(sfixed64, tag="6")]
        AsInt(i64),
    }
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.metrics.v1.HistogramDataPoint")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HistogramDataPoint {
    #[prost(message, repeated, tag="9")]
    pub attributes: ::prost::alloc::vec::Vec<super::super::common::v1::KeyValue>,
    #[prost(fixed64, tag="2")]
    pub start_time_unix_nano: u64,
    #[prost(fixed64, tag="3")]
    pub time_unix_nano: u64,
    #[prost(fixed64, tag="4")]
    pub count: u64,
    #[prost(double, optional, tag="5")]
    pub sum: ::core::option::Option<f64>,
    #[prost(fixed64, repeated, tag="6")]
    pub bucket_counts: ::prost::alloc::vec::Vec<u64>,
    #[prost(double, repeated, tag="7")]
    pub explicit_bounds: ::prost::alloc::vec::Vec<f64>,
    #[prost(message, repeated, tag="8")]
    pub exemplars: ::prost::alloc::vec::Vec<Exemplar>,
    #[prost(uint32, tag="10")]
    pub flags: u32,
    #[prost(double, optional, tag="11")]
    pub min: ::core::option::Option<f64>,
    #[prost(double, optional, tag="12")]
    pub max: ::core::option::Option<f64>,
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExponentialHistogramDataPoint {
    #[prost(message, repeated, tag="1")]
    pub attributes: ::prost::alloc::vec::Vec<super::super::common::v1::KeyValue>,
    #[prost(fixed64, tag="2")]
    pub start_time_unix_nano: u64,
    #[prost(fixed64, tag="3")]
    pub time_unix_nano: u64,
    #[prost(fixed64, tag="4")]
    pub count: u64,
    #[prost(double, optional, tag="5")]
    pub sum: ::core::option::Option<f64>,
    #[prost(sint32, tag="6")]
    pub scale: i32,
    #[prost(fixed64, tag="7")]
    pub zero_count: u64,
    #[prost(message, optional, tag="8")]
    pub positive: ::core::option::Option<exponential_histogram_data_point::Buckets>,
    #[prost(message, optional, tag="9")]
    pub negative: ::core::option::Option<exponential_histogram_data_point::Buckets>,
    #[prost(uint32, tag="10")]
    pub flags: u32,
    #[prost(message, repeated, tag="11")]
    pub exemplars: ::prost::alloc::vec::Vec<Exemplar>,
    #[prost(double, optional, tag="12")]
    pub min: ::core::option::Option<f64>,
    #[prost(double, optional, tag="13")]
    pub max: ::core::option::Option<f64>,
    #[prost(double, tag="14")]
    pub zero_threshold: f64,
}
/// Nested message and enum types in `ExponentialHistogramDataPoint`.
pub mod exponential_histogram_data_point {
    #[crate::pdata::otlp::qualified("opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets")]
    #[derive(crate::pdata::otlp::Message)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Buckets {
        #[prost(sint32, tag="1")]
        pub offset: i32,
        #[prost(uint64, repeated, tag="2")]
        pub bucket_counts: ::prost::alloc::vec::Vec<u64>,
    }
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.metrics.v1.SummaryDataPoint")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SummaryDataPoint {
    #[prost(message, repeated, tag="7")]
    pub attributes: ::prost::alloc::vec::Vec<super::super::common::v1::KeyValue>,
    #[prost(fixed64, tag="2")]
    pub start_time_unix_nano: u64,
    #[prost(fixed64, tag="3")]
    pub time_unix_nano: u64,
    #[prost(fixed64, tag="4")]
    pub count: u64,
    #[prost(double, tag="5")]
    pub sum: f64,
    #[prost(message, repeated, tag="6")]
    pub quantile_values: ::prost::alloc::vec::Vec<summary_data_point::ValueAtQuantile>,
    #[prost(uint32, tag="8")]
    pub flags: u32,
}
/// Nested message and enum types in `SummaryDataPoint`.
pub mod summary_data_point {
    #[crate::pdata::otlp::qualified("opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile")]
    #[derive(crate::pdata::otlp::Message)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct ValueAtQuantile {
        #[prost(double, tag="1")]
        pub quantile: f64,
        #[prost(double, tag="2")]
        pub value: f64,
    }
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.metrics.v1.Exemplar")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Exemplar {
    #[prost(message, repeated, tag="7")]
    pub filtered_attributes: ::prost::alloc::vec::Vec<super::super::common::v1::KeyValue>,
    #[prost(fixed64, tag="2")]
    pub time_unix_nano: u64,
    #[prost(bytes="vec", tag="4")]
    pub span_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="5")]
    pub trace_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(oneof="exemplar::Value", tags="3, 6")]
    pub value: ::core::option::Option<exemplar::Value>,
}
/// Nested message and enum types in `Exemplar`.
pub mod exemplar {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(double, tag="3")]
        AsDouble(f64),
        #[prost(sfixed64, tag="6")]
        AsInt(i64),
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AggregationTemporality {
    Unspecified = 0,
    Delta = 1,
    Cumulative = 2,
}
impl AggregationTemporality {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "AGGREGATION_TEMPORALITY_UNSPECIFIED",
            Self::Delta => "AGGREGATION_TEMPORALITY_DELTA",
            Self::Cumulative => "AGGREGATION_TEMPORALITY_CUMULATIVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AGGREGATION_TEMPORALITY_UNSPECIFIED" => Some(Self::Unspecified),
            "AGGREGATION_TEMPORALITY_DELTA" => Some(Self::Delta),
            "AGGREGATION_TEMPORALITY_CUMULATIVE" => Some(Self::Cumulative),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DataPointFlags {
    DoNotUse = 0,
    NoRecordedValueMask = 1,
}
impl DataPointFlags {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DoNotUse => "DATA_POINT_FLAGS_DO_NOT_USE",
            Self::NoRecordedValueMask => "DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DATA_POINT_FLAGS_DO_NOT_USE" => Some(Self::DoNotUse),
            "DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK" => Some(Self::NoRecordedValueMask),
            _ => None,
        }
    }
}
