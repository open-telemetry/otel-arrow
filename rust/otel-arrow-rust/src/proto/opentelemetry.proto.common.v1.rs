// This file is @generated by prost-build.
#[crate::pdata::otlp::qualified("opentelemetry.proto.common.v1.AnyValue")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnyValue {
    #[prost(oneof="any_value::Value", tags="1, 2, 3, 4, 5, 6, 7")]
    pub value: ::core::option::Option<any_value::Value>,
}
/// Nested message and enum types in `AnyValue`.
pub mod any_value {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(string, tag="1")]
        StringValue(::prost::alloc::string::String),
        #[prost(bool, tag="2")]
        BoolValue(bool),
        #[prost(int64, tag="3")]
        IntValue(i64),
        #[prost(double, tag="4")]
        DoubleValue(f64),
        #[prost(message, tag="5")]
        ArrayValue(super::ArrayValue),
        #[prost(message, tag="6")]
        KvlistValue(super::KeyValueList),
        #[prost(bytes, tag="7")]
        BytesValue(::prost::alloc::vec::Vec<u8>),
    }
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.common.v1.ArrayValue")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArrayValue {
    #[prost(message, repeated, tag="1")]
    pub values: ::prost::alloc::vec::Vec<AnyValue>,
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.common.v1.KeyValueList")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KeyValueList {
    #[prost(message, repeated, tag="1")]
    pub values: ::prost::alloc::vec::Vec<KeyValue>,
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.common.v1.KeyValue")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KeyValue {
    #[prost(string, tag="1")]
    pub key: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub value: ::core::option::Option<AnyValue>,
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.common.v1.InstrumentationScope")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstrumentationScope {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub version: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="3")]
    pub attributes: ::prost::alloc::vec::Vec<KeyValue>,
    #[prost(uint32, tag="4")]
    pub dropped_attributes_count: u32,
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.common.v1.EntityRef")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityRef {
    #[prost(string, tag="1")]
    pub schema_url: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, repeated, tag="3")]
    pub id_keys: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag="4")]
    pub description_keys: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
