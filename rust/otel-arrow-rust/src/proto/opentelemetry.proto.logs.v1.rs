// This file is @generated by prost-build.
#[crate::pdata::otlp::qualified("opentelemetry.proto.logs.v1.LogsData")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogsData {
    #[prost(message, repeated, tag = "1")]
    pub resource_logs: ::prost::alloc::vec::Vec<ResourceLogs>,
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.logs.v1.ResourceLogs")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceLogs {
    #[prost(message, optional, tag = "1")]
    pub resource: ::core::option::Option<super::super::resource::v1::Resource>,
    #[prost(message, repeated, tag = "2")]
    pub scope_logs: ::prost::alloc::vec::Vec<ScopeLogs>,
    #[prost(string, tag = "3")]
    pub schema_url: ::prost::alloc::string::String,
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.logs.v1.ScopeLogs")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScopeLogs {
    #[prost(message, optional, tag = "1")]
    pub scope: ::core::option::Option<super::super::common::v1::InstrumentationScope>,
    #[prost(message, repeated, tag = "2")]
    pub log_records: ::prost::alloc::vec::Vec<LogRecord>,
    #[prost(string, tag = "3")]
    pub schema_url: ::prost::alloc::string::String,
}
#[crate::pdata::otlp::qualified("opentelemetry.proto.logs.v1.LogRecord")]
#[derive(crate::pdata::otlp::Message)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogRecord {
    #[prost(fixed64, tag = "1")]
    pub time_unix_nano: u64,
    #[prost(fixed64, tag = "11")]
    pub observed_time_unix_nano: u64,
    #[prost(enumeration = "SeverityNumber", tag = "2")]
    pub severity_number: i32,
    #[prost(string, tag = "3")]
    pub severity_text: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub body: ::core::option::Option<super::super::common::v1::AnyValue>,
    #[prost(message, repeated, tag = "6")]
    pub attributes: ::prost::alloc::vec::Vec<super::super::common::v1::KeyValue>,
    #[prost(uint32, tag = "7")]
    pub dropped_attributes_count: u32,
    #[prost(fixed32, tag = "8")]
    pub flags: u32,
    #[prost(bytes = "vec", tag = "9")]
    pub trace_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "10")]
    pub span_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "12")]
    pub event_name: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SeverityNumber {
    Unspecified = 0,
    Trace = 1,
    Trace2 = 2,
    Trace3 = 3,
    Trace4 = 4,
    Debug = 5,
    Debug2 = 6,
    Debug3 = 7,
    Debug4 = 8,
    Info = 9,
    Info2 = 10,
    Info3 = 11,
    Info4 = 12,
    Warn = 13,
    Warn2 = 14,
    Warn3 = 15,
    Warn4 = 16,
    Error = 17,
    Error2 = 18,
    Error3 = 19,
    Error4 = 20,
    Fatal = 21,
    Fatal2 = 22,
    Fatal3 = 23,
    Fatal4 = 24,
}
impl SeverityNumber {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "SEVERITY_NUMBER_UNSPECIFIED",
            Self::Trace => "SEVERITY_NUMBER_TRACE",
            Self::Trace2 => "SEVERITY_NUMBER_TRACE2",
            Self::Trace3 => "SEVERITY_NUMBER_TRACE3",
            Self::Trace4 => "SEVERITY_NUMBER_TRACE4",
            Self::Debug => "SEVERITY_NUMBER_DEBUG",
            Self::Debug2 => "SEVERITY_NUMBER_DEBUG2",
            Self::Debug3 => "SEVERITY_NUMBER_DEBUG3",
            Self::Debug4 => "SEVERITY_NUMBER_DEBUG4",
            Self::Info => "SEVERITY_NUMBER_INFO",
            Self::Info2 => "SEVERITY_NUMBER_INFO2",
            Self::Info3 => "SEVERITY_NUMBER_INFO3",
            Self::Info4 => "SEVERITY_NUMBER_INFO4",
            Self::Warn => "SEVERITY_NUMBER_WARN",
            Self::Warn2 => "SEVERITY_NUMBER_WARN2",
            Self::Warn3 => "SEVERITY_NUMBER_WARN3",
            Self::Warn4 => "SEVERITY_NUMBER_WARN4",
            Self::Error => "SEVERITY_NUMBER_ERROR",
            Self::Error2 => "SEVERITY_NUMBER_ERROR2",
            Self::Error3 => "SEVERITY_NUMBER_ERROR3",
            Self::Error4 => "SEVERITY_NUMBER_ERROR4",
            Self::Fatal => "SEVERITY_NUMBER_FATAL",
            Self::Fatal2 => "SEVERITY_NUMBER_FATAL2",
            Self::Fatal3 => "SEVERITY_NUMBER_FATAL3",
            Self::Fatal4 => "SEVERITY_NUMBER_FATAL4",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SEVERITY_NUMBER_UNSPECIFIED" => Some(Self::Unspecified),
            "SEVERITY_NUMBER_TRACE" => Some(Self::Trace),
            "SEVERITY_NUMBER_TRACE2" => Some(Self::Trace2),
            "SEVERITY_NUMBER_TRACE3" => Some(Self::Trace3),
            "SEVERITY_NUMBER_TRACE4" => Some(Self::Trace4),
            "SEVERITY_NUMBER_DEBUG" => Some(Self::Debug),
            "SEVERITY_NUMBER_DEBUG2" => Some(Self::Debug2),
            "SEVERITY_NUMBER_DEBUG3" => Some(Self::Debug3),
            "SEVERITY_NUMBER_DEBUG4" => Some(Self::Debug4),
            "SEVERITY_NUMBER_INFO" => Some(Self::Info),
            "SEVERITY_NUMBER_INFO2" => Some(Self::Info2),
            "SEVERITY_NUMBER_INFO3" => Some(Self::Info3),
            "SEVERITY_NUMBER_INFO4" => Some(Self::Info4),
            "SEVERITY_NUMBER_WARN" => Some(Self::Warn),
            "SEVERITY_NUMBER_WARN2" => Some(Self::Warn2),
            "SEVERITY_NUMBER_WARN3" => Some(Self::Warn3),
            "SEVERITY_NUMBER_WARN4" => Some(Self::Warn4),
            "SEVERITY_NUMBER_ERROR" => Some(Self::Error),
            "SEVERITY_NUMBER_ERROR2" => Some(Self::Error2),
            "SEVERITY_NUMBER_ERROR3" => Some(Self::Error3),
            "SEVERITY_NUMBER_ERROR4" => Some(Self::Error4),
            "SEVERITY_NUMBER_FATAL" => Some(Self::Fatal),
            "SEVERITY_NUMBER_FATAL2" => Some(Self::Fatal2),
            "SEVERITY_NUMBER_FATAL3" => Some(Self::Fatal3),
            "SEVERITY_NUMBER_FATAL4" => Some(Self::Fatal4),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LogRecordFlags {
    DoNotUse = 0,
    TraceFlagsMask = 255,
}
impl LogRecordFlags {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DoNotUse => "LOG_RECORD_FLAGS_DO_NOT_USE",
            Self::TraceFlagsMask => "LOG_RECORD_FLAGS_TRACE_FLAGS_MASK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LOG_RECORD_FLAGS_DO_NOT_USE" => Some(Self::DoNotUse),
            "LOG_RECORD_FLAGS_TRACE_FLAGS_MASK" => Some(Self::TraceFlagsMask),
            _ => None,
        }
    }
}
